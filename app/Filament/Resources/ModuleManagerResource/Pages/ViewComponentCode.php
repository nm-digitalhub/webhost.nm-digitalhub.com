<?php

namespace App\Filament\Resources\ModuleManagerResource\Pages;

use App\Filament\Resources\ModuleManagerResource;
use Filament\Actions;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\Page;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Livewire\Attributes\Computed;
use Livewire\Attributes\Url;

/**
 * ViewComponentCode Page
 *
 * Displays the code of a component and allows editing if the user has permission.
 * This page provides a code editor for viewing and potentially editing component code.
 */
class ViewComponentCode extends Page
{
    protected static string $resource = ModuleManagerResource::class;

    protected static string $view = 'filament.resources.module-manager.pages.view-component-code';

    /**
     * The relative path to the component file
     */
    #[Url]
    public string $path = '';

    /**
     * Content of the file
     */
    public string $fileContent = '';

    /**
     * Whether the file is editable
     */
    public bool $isEditable = false;

    /**
     * Whether the component was auto-generated
     */
    public bool $isGenerated = false;

    /**
     * The file extension
     */
    public string $fileExtension = 'php';

    /**
     * The language for code highlighting
     */
    public string $language = 'php';

    /**
     * Edited content for saving
     */
    public string $editedContent = '';

    /**
     * File information
     */
    public array $fileInfo = [];

    /**
     * Initialize the page
     */
    public function mount(string $path): void
    {
        if ($path === '' || $path === '0') {
            throw ValidationException::withMessages([
                'path' => 'The path parameter is required.',
            ]);
        }

        // Set the path
        $this->path = $path;

        // Load the file content
        $this->loadFile();

        // Initialize edited content with file content
        $this->editedContent = $this->fileContent;
    }

    /**
     * Load file content and metadata
     */
    protected function loadFile(): void
    {
        $filePath = base_path($this->path);

        if (! File::exists($filePath)) {
            $this->fileContent = "// File not found: {$this->path}";
            $this->isEditable = false;

            return;
        }

        // Get file content
        $this->fileContent = File::get($filePath);

        // Set extension and language
        $this->fileExtension = File::extension($filePath);
        $this->language = $this->determineLanguage();

        // Set file info
        $this->fileInfo = [
            'filename' => basename($filePath),
            'size' => File::size($filePath),
            'last_modified' => File::lastModified($filePath),
            'type' => File::type($filePath),
            'extension' => $this->fileExtension,
            'path' => $this->path,
        ];

        // Determine if file is editable
        $this->isEditable = $this->canEditFile();

        // Check if the component was generated
        $this->checkIfGenerated();
    }

    /**
     * Determine the code highlighting language based on file extension
     */
    protected function determineLanguage(): string
    {
        return match ($this->fileExtension) {
            'php' => 'php',
            'js' => 'javascript',
            'ts' => 'typescript',
            'jsx' => 'javascript',
            'tsx' => 'typescript',
            'json' => 'json',
            'blade.php' => 'html', // Blade templates
            'md' => 'markdown',
            'css' => 'css',
            'scss' => 'scss',
            'html' => 'html',
            default => 'php',
        };
    }

    /**
     * Determine if the file can be edited
     */
    protected function canEditFile(): bool
    {
        // Check write permissions
        $filePath = base_path($this->path);

        if (! File::exists($filePath)) {
            return false;
        }

        // Check if file is writable
        return is_writable($filePath);
    }

    /**
     * Check if the component was generated by the generator
     */
    protected function checkIfGenerated(): void
    {
        // Check if the component was generated using the Generator model
        try {
            $generator = \App\Models\Generator::where('target_path', $this->path)
                ->orWhere('target_path', base_path($this->path))
                ->first();

            $this->isGenerated = $generator !== null;
        } catch (\Exception) {
            $this->isGenerated = false;
        }
    }

    /**
     * Get formatted file size
     */
    #[Computed]
    public function getFormattedFileSize(): string
    {
        $bytes = $this->fileInfo['size'] ?? 0;

        if ($bytes > 1024 * 1024) {
            return round($bytes / (1024 * 1024), 2).' MB';
        } elseif ($bytes > 1024) {
            return round($bytes / 1024, 2).' KB';
        } else {
            return $bytes.' bytes';
        }
    }

    /**
     * Get formatted last modified date
     */
    #[Computed]
    public function getFormattedLastModified(): string
    {
        $timestamp = $this->fileInfo['last_modified'] ?? 0;

        return date('Y-m-d H:i:s', $timestamp);
    }

    /**
     * Get component type
     */
    #[Computed]
    public function getComponentType(): string
    {
        if (Str::contains($this->path, 'Resources')) {
            return 'Resource';
        } elseif (Str::contains($this->path, 'Pages')) {
            return 'Page';
        } elseif (Str::contains($this->path, 'Widgets')) {
            return 'Widget';
        } elseif (Str::contains($this->path, 'Livewire')) {
            return 'Livewire Component';
        } else {
            return 'Unknown';
        }
    }

    /**
     * Get actions for the page
     *
     * @return array<\Filament\Actions\Action|\Filament\Actions\ActionGroup>
     */
    protected function getActions(): array
    {
        return [
            Actions\Action::make('back')
                ->label('חזרה לרשימה')
                ->icon('heroicon-o-arrow-left')
                ->color('secondary')
                ->url(route('filament.admin.resources.module-managers.index')),

            Actions\Action::make('save')
                ->label('שמור שינויים')
                ->icon('heroicon-o-check')
                ->color('primary')
                ->action('saveFile')
                ->visible($this->isEditable)
                ->requiresConfirmation(),

            Actions\Action::make('edit_in_generator')
                ->label('ערוך במחולל')
                ->icon('heroicon-o-pencil-square')
                ->color('warning')
                ->url(function () {
                    $generator = \App\Models\Generator::where('target_path', $this->path)
                        ->orWhere('target_path', base_path($this->path))
                        ->first();

                    if ($generator) {
                        return route('filament.admin.resources.generators.edit', $generator);
                    }

                    return route('filament.admin.resources.module-managers.index');
                })
                ->openUrlInNewTab()
                ->visible($this->isGenerated),
        ];
    }

    /**
     * Save the edited file content
     */
    public function saveFile(): void
    {
        try {
            $filePath = base_path($this->path);

            // Check if we can edit the file
            if (! $this->isEditable) {
                Notification::make()
                    ->title('השינויים לא נשמרו')
                    ->body('הקובץ אינו ניתן לעריכה, הרשאות לא מספיקות')
                    ->danger()
                    ->send();

                return;
            }

            // Save the file
            File::put($filePath, $this->editedContent);

            // Reload file
            $this->loadFile();

            // Show notification
            Notification::make()
                ->title('השינויים נשמרו בהצלחה')
                ->success()
                ->send();
        } catch (\Exception $e) {
            Notification::make()
                ->title('השינויים לא נשמרו')
                ->body('אירעה שגיאה בעת שמירת הקובץ: '.$e->getMessage())
                ->danger()
                ->send();
        }
    }
}
